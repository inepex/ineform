outpath:${class.workspaceRelativePath}dao/${classname}Dao.java
package ${package}.dao;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.inject.Inject;
import com.google.inject.Provider;
import com.google.inject.Singleton;
import javax.persistence.EntityManager;

import com.inepex.ineFrame.server.*;

import ${package}.*;
import ${package}.kvo.*;
import ${package}.assist.*;
import ${package}.kvo.search.*;
import ${package}.mapper.*;
import ${package}.meta.*;
import ${package}.dao.query.*;
import ${package}.dao.*;
import ${package}.daoext.*;
import com.inepex.ineom.shared.AssistedObjectHandlerFactory;
import com.inepex.ineom.shared.descriptor.DescriptorStore;

/**
 * Just generated once, don't need to regenerate after modifying attributes!
 * 
 * To customize persist, merge or remove behaviour override persist(E), merge(E) or remove(E). (Don't 
 * forget to call super.persist, super.merge ...)
 * 
 */
@Singleton
public class ${classname}Dao extends BaseDao<${classname}> {

	public static interface ${classname}SelectorCustomizer extends SelectorCustomizer<CriteriaSelector<?,${classname}>> {
	}
	
	private final DescriptorStore descStore;
	
	@Inject
	public ${classname}Dao(Provider<EntityManager> em, ManipulationObjectFactory objectFactory
		, AssistedObjectHandlerFactory handlerFactory
		, DescriptorStore descStore){
		super(em, objectFactory, handlerFactory);
		this.descStore=descStore;
	}

	@Override
	public BaseQuery<${classname}> getQuery() {
		return new ${classname}Query(descStore);
	}

	@Override
	public BaseMapper<${classname}> getMapper() {
		return new ${classname}Mapper(descStore);
	}

	@Override
	public CriteriaSelector<${classname}, ${classname}> getSelector() {
		return new CriteriaSelector<${classname}, ${classname}>(em, getQuery(), ${classname}.class, ${classname}.class);
	}

	@Override
	public CriteriaSelector<Long, ${classname}> getCountSelector() {
		return new CriteriaSelector<Long, ${classname}>(em, getQuery(), Long.class, ${classname}.class);
	}

	@Override
	public Class<${classname}> getClazz() {
		return ${classname}.class;
	}

	@Override
	public ${classname} newInstance() {
		return new ${classname}();
	}
		
}