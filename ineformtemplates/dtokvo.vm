outpath:${class.workspaceRelativePath}kvo/${classname}KVO.java
package ${package}.kvo;

import java.util.List;
import java.util.LinkedList;
import ${package}.*;
import com.inepex.ineom.shared.assistedobject.DtoAdapter;

@SuppressWarnings("serial")
public class ${classname}KVO extends DtoAdapter {

	private transient List<String> keys = null;

	private ${classname} wrapped;

	public ${classname}KVO() {
		this.wrapped= new ${classname}();
	}
	
	public ${classname}KVO(${classname} wrapped) {
		this.wrapped=wrapped;
	}
	
	@Override
	public String getDescriptorName() {
		return ${classname}Consts.descriptorName;
	}
	
	@Override
	public List<String> getKeys() {
		if (keys == null) {
			keys = new LinkedList<String>();
#foreach( $attr in $attrs )
#if($attr.static == false && !${attr.hasAnnotation("Kvo_Transparent")})
			keys.add(${classname}Consts.k_${attr.name});
#end
#end
		}	
		return keys;
	}
	
		@Override
	public DtoAdapter clone() {
		${classname}KVO cloned = new ${classname}KVO();
#foreach( $attr in $attrs )
#if($attr.static == false && !${attr.hasAnnotation("Kvo_Transparent")})
#if($attr.enum)
		cloned.wrapped.set${attr.nameU1}(wrapped.get${attr.nameU1}());
#else
		cloned.wrapped.set${attr.nameU1}(wrapped.get${attr.nameU1}() == null ? null : new ${attr.type}(wrapped.get${attr.nameU1}()));
#end
#end
#end		
		return cloned;
	}

	@Override
	protected void setObject(String key, Object o) {
#foreach( $attr in $attrs )
#if($attr.static == false && !${attr.hasAnnotation("Kvo_Transparent")})
		if (key.equals(${classname}Consts.k_${attr.name})) {
#if( $attr.type == "Date")
			wrapped.set${attr.nameU1}(new Date((Long)o));
			return;
#elseif($attr.enum)
			if (o != null){
				wrapped.set${attr.nameU1}(${attr.typeU1}.values()[((Long)o).intValue()]);
			}
			return;
#elseif($attr.type == "Long" || $attr.type == "Double" || $attr.type == "String" || $attr.type == "Boolean"
		|| $attr.type == "Relation")
			wrapped.set${attr.nameU1}((${attr.type})o);
			return;
#elseif($attr.list == true)
			wrapped.set${attr.nameU1}((IneList)o);
			return;
#end		
		}
#end
#end
	}
	
	
	@Override
	protected Object getObject(String key) {
#foreach( $attr in $attrs )
#if($attr.static == false && !${attr.hasAnnotation("Kvo_Transparent")})	
		if (wrapped.get${attr.nameU1}() != null && key.equals(${classname}Consts.k_${attr.name}))
#if($attr.type == "Date")
			return wrapped.get${attr.nameU1}().getTime();
#elseif($attr.enum)
			return new Long(wrapped.get${attr.nameU1}().ordinal());
#elseif($attr.type == "Long" || $attr.type == "Double" || $attr.type == "String" || $attr.type == "Boolean"
		|| $attr.type == "Relation" || $attr.list == true)
			return wrapped.get${attr.nameU1}();
#end
#end
#end
		return null;
	}
}