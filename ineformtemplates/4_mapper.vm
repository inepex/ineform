outpath:${class.workspaceRelativePath}/mapper/${classname}Mapper.java
package ${package}.mapper;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import ${package}.*;
import ${package}.kvo.*;
import ${package}.kvo.${classname}HandlerFactory.${classname}Handler;
import ${package}.assist.*;
import ${package}.mapper.*;
import com.inepex.ineom.shared.IFConsts;
import com.inepex.ineom.shared.IneList;
import com.inepex.ineom.shared.Relation;
import com.google.inject.Inject;
import com.inepex.ineForm.shared.BaseMapper;
import com.inepex.ineom.shared.assistedobject.AssistedObject;
import com.inepex.ineom.shared.assistedobject.KeyValueObject;
import com.inepex.ineom.shared.descriptor.DescriptorStore;
import com.inepex.ineom.shared.descriptor.ObjectDesc;

public class ${classname}Mapper extends BaseMapper<${classname}>{
	
	private final DescriptorStore descriptorStore;
	private final ${classname}HandlerFactory handlerFactory;
	
	@Inject
	public ${classname}Mapper(DescriptorStore descriptorStore) {
		this.descriptorStore=descriptorStore;
		this.handlerFactory=new ${classname}HandlerFactory(descriptorStore);
	}

	@Override
	public ${classname} kvoToEntity(AssistedObject fromKvo, ${classname} to) {
		${classname}Handler fromHandler = handlerFactory.createHandler(fromKvo);
		
		if (to == null)
			to = new ${classname}();
#foreach( $attr in $attrs )
#if ( $attr.static == false && !${attr.hasAnnotation("Kvo_Transparent")})
#if($attr.name == "id")
		if (!fromHandler.isNew()) 
			to.set${attr.nameU1}(fromHandler.get${attr.nameU1}());
#elseif($attr.type == "Date") 
		if (fromHandler.containsLong(${classname}Consts.k_${attr.name}))  
			to.set${attr.nameU1}(new Date(fromHandler.get${attr.nameU1}()));
#elseif($attr.type == "Long")
		if (fromHandler.containsLong(${classname}Consts.k_${attr.name})) 
			to.set${attr.nameU1}(fromHandler.get${attr.nameU1}());
#elseif($attr.type == "Boolean")
		if (fromHandler.containsBoolean(${classname}Consts.k_${attr.name})) 
			to.set${attr.nameU1}(fromHandler.get${attr.nameU1}());
#elseif($attr.type == "Double")
		if (fromHandler.containsDouble(${classname}Consts.k_${attr.name})) 
			to.set${attr.nameU1}(fromHandler.get${attr.nameU1}());
#elseif($attr.type == "String")
		if (fromHandler.containsString(${classname}Consts.k_${attr.name})) 
			to.set${attr.nameU1}(fromHandler.get${attr.nameU1}());
#elseif($attr.enum)
 		if (fromHandler.containsLong(${classname}Consts.k_${attr.name})) 
			to.set${attr.nameU1}(${attr.type}.values()[new Long(fromHandler.get${attr.nameU1}()).intValue()]);
#elseif($attr.list == true && $attr.hasAnnotation("OneToMany"))
		if (fromHandler.containsList(${classname}Consts.k_${attr.name})) {
#if($attr.hasAnnotation("Kvo_Fetch") && $attr.getAnnotationParamValue("Kvo_Fetch","mode")=="Mode.idRelation")
		//TODO
		//TODO saving skipped, because saving a IneList (which not contains KVO-s) causes removing!!!
#else
			if (to.get${attr.nameU1}() == null)
				to.set${attr.nameU1}(new ArrayList<${attr.fistGenTypeU1}>());

    		Map<Long,${attr.fistGenTypeU1}> origItems = new HashMap<Long, ${attr.fistGenTypeU1}>();
			for (${attr.fistGenTypeU1} item : to.get${attr.nameU1}()) {
				origItems.put(item.getId(), item);
			}
			
			${attr.fistGenTypeU1}Mapper mapper = new ${attr.fistGenTypeU1}Mapper(descriptorStore);
			for (Relation rel : fromHandler.get${attr.nameU1}().getRelationList()) {
				if (rel == null)
					continue;
				if (rel.getId().equals(IFConsts.NEW_ITEM_ID)) { // create new item
					${attr.fistGenTypeU1} entity = new ${attr.fistGenTypeU1}(IFConsts.NEW_ITEM_ID);
					mapper.kvoToEntity(rel.getKvo(), entity);
					entity.set${utils.getU1($attr.getAnnotationParamValue("OneToMany","mappedBy"))}(to);
					to.get${attr.nameU1}().add(entity);
				} else {
					${attr.fistGenTypeU1} origItem = origItems.get(rel.getId());
					if (rel.getKvo() == null) { 			    // delete item
						to.get${attr.nameU1}().remove(origItem);
					} else {									// edit item
						mapper.kvoToEntity(rel.getKvo(), origItem);
					}
				}
			}
#end
		}
#else
		if (fromHandler.containsRelation(${classname}Consts.k_${attr.name})) {
			if (fromHandler.get${attr.nameU1}() == null){
				to.set${attr.nameU1}(null);
			} else {
#if($attr.hasAnnotation("ManyToOne"))
				to.set${attr.nameU1}(new ${attr.typeU1}(fromHandler.get${attr.nameU1}().getId()));
#elseif($attr.hasAnnotation("OneToOne"))
				${attr.typeU1} relatedEntity = to.get${attr.nameU1}();
    			if (relatedEntity == null) {
					relatedEntity = new ${attr.typeU1}(IFConsts.NEW_ITEM_ID);
				}
				new ${attr.typeU1}Mapper(descriptorStore)
					.kvoToEntity(fromHandler.get${attr.nameU1}().getKvo(), relatedEntity);
				to.set${attr.nameU1}(relatedEntity);
#end
			}
		}
#end 
#end 
#end

		/*hc:customToEntity*/
		//custom mappings to Entity comes here.
		/*hc*/
		
		return to;
	}
	
	@Override
	public AssistedObject entityToKvo(${classname} entity) {
		${classname}Handler handler = handlerFactory.createHandler();
	
#foreach( $attr in $attrs )
#if ($attr.static == false && !${attr.hasAnnotation("Kvo_Transparent")})
#if ($attr.type == "Date" )
		if (entity.get${attr.nameU1}() != null && entity.get${attr.nameU1}().getTime() != null) 
			handler.set${attr.nameU1}(entity.get${attr.nameU1}().getTime());
#elseif($attr.type == "Long" || $attr.type == "Double" || $attr.type == "Integer" || $attr.type == "Char" || $attr.type == "Boolean")
		if (entity.get${attr.nameU1}() != null) 
			handler.set${attr.nameU1}(entity.get${attr.nameU1}());
#elseif($attr.type == "String")
		if (entity.get${attr.nameU1}() != null && !"".equals(entity.get${attr.nameU1}())) 
			handler.set${attr.nameU1}(entity.get${attr.nameU1}());
#elseif($attr.enum)
		if (entity.get${attr.nameU1}() != null){
			handler.set${attr.nameU1}(new Long(entity.get${attr.nameU1}().ordinal()));
		}
#elseif($attr.list == true)
#if(!$attr.hasAnnotation("Kvo_Fetch") || $attr.getAnnotationParamValue("Kvo_Fetch","mode")=="Mode.fullObject")
		{
    		IneList ineList = new IneList();
    		List<Relation> relationList = new ArrayList<Relation>();
    		if (entity.get${attr.nameU1}() != null)
    			for (${attr.fistGenTypeU1} item : entity.get${attr.nameU1}()) {
    				relationList.add(new ${attr.fistGenTypeU1}Mapper(descriptorStore).toRelation(item, true));
    			}
    		if (relationList.size() > 0) {
    			ineList.setRelationList(relationList);
    			handler.set${attr.nameU1}(ineList);
    		}
		}
#elseif($attr.getAnnotationParamValue("Kvo_Fetch","mode")=="Mode.idRelation")
		{
    		IneList ineList = new IneList();
    		List<Relation> relationList = new ArrayList<Relation>();
    		if (entity.get${attr.nameU1}() != null)
    			for (${attr.fistGenTypeU1} item : entity.get${attr.nameU1}()) {
    				relationList.add(new ${attr.fistGenTypeU1}Mapper(descriptorStore).toRelation(item, false));
    			}
    		if (relationList.size() > 0) {
    			ineList.setRelationList(relationList);
    			handler.set${attr.nameU1}(ineList);
    		}
		}
#end
#else
		if (entity.get${attr.nameU1}() != null) 
#if (!$attr.hasAnnotation("Kvo_Fetch") || $attr.getAnnotationParamValue("Kvo_Fetch","mode")=="Mode.fullObject")
			handler.set${attr.nameU1}(new ${attr.typeU1}Mapper(descriptorStore).toRelation(entity.get${attr.nameU1}(), true));
#elseif ($attr.getAnnotationParamValue("Kvo_Fetch","mode")=="Mode.idRelation")
			handler.set${attr.nameU1}(new ${attr.typeU1}Mapper(descriptorStore).toRelation(entity.get${attr.nameU1}(), false));
#else
			;//Mode.noFetch
#end
#end
#end
#end

		/*hc:customToKvo*/
		//custom mappings to Kvo comes here. Eg. when some properties should not be sent to the UI
		/*hc*/

		return handler.getAssistedObject();
	}
	
	@Override
	public Relation toRelation(${classname} entity, boolean includeKvo){
		if (entity == null)
			return null;
		return new Relation(entity.getId(), entity.toString(), includeKvo ? entityToKvo(entity) : null);
	}
	
}